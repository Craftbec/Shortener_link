// Code generated by MockGen. DO NOT EDIT.
// Source: inmemory.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CheckPost mocks base method.
func (m *MockStorage) CheckPost(ctx context.Context, original string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPost", ctx, original)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPost indicates an expected call of CheckPost.
func (mr *MockStorageMockRecorder) CheckPost(ctx, original interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPost", reflect.TypeOf((*MockStorage)(nil).CheckPost), ctx, original)
}

// Get mocks base method.
func (m *MockStorage) Get(ctx context.Context, short string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, short)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(ctx, short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), ctx, short)
}

// GracefulStopDB mocks base method.
func (m *MockStorage) GracefulStopDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulStopDB")
}

// GracefulStopDB indicates an expected call of GracefulStopDB.
func (mr *MockStorageMockRecorder) GracefulStopDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulStopDB", reflect.TypeOf((*MockStorage)(nil).GracefulStopDB))
}

// Post mocks base method.
func (m *MockStorage) Post(ctx context.Context, original, short string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, original, short)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockStorageMockRecorder) Post(ctx, original, short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockStorage)(nil).Post), ctx, original, short)
}
